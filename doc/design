Overall design:

Server:
Handles comms to each host
Coordinates the actions between the hosts
Note: the hosts "check in" the whole time, on an interval.

Host Comms:
Hosts should receive and send info in an JSON format.

Message format out to the server, in the form of the POST string "data"

# "host" POST string info
{
  "id":string, #Generate a random uuid for this
  "name":string, #Human-readable string
  "date":date, #Date of the ping; used to prevent replay attacks
  "channelname": { # Channel info for the first channel (this is the name) - note, values stored in server override
    "type":string, #Human-readable; channels must be of a common type to be within a common source
    "variable":boolean, #true: scales 0-1, false: values is either 0 or 1
    "active":boolean, #true: connected to something, false: exists, but unused
    "max":number, #applies to variable: number between 0 and 1
    "min":"number", #Same as max
    "color":"string", #hex color string, minus the #
    "units":"string", #human readable representation of units; it's up to host to scale from units to the values the hardware wants.
    "times":[time, time, time, ...], #Data to transfer over to the server.  Note: once data is transferred, clear it out from memory on the host
    "values":[value, value, value, ...] #time is in linuxtime, UTC, value in "units" units
    ...
  },

  "channelname": {
           ...
  },
}

Also, include an "HMAC" POST string, with an authentication SHA-256 hash of "data"

Finally, include an "init" POST string, giving a value of 1 to request a time hack from the server.  Note: an init=1 will get simply a linux time response and nothing more.
   Note: hosts are going to need to get this time hack before the server will accept anything from them: the server will only accept increasing "date" values.

Return from the server, in the form of a page of JSON data.
{
  "HMAC":"value", #HMAC of the rest of the message, starting with character ######TODO
  "date":"date", # Linux time status, host will check to make sure this is greater than seen before
  "nextping":"date", # Server specification of the next time the controller should check in
  "InInterval":s, #Interval to read each input channels
  "OutInterval":s, #Interval at which to update the output channels
  "channelname": { # channel name isn't expected to be parsed, but serves as a placeholder to iterate
     "times":[time, time, time, ...],
     "values":[value, value, value, ...]
  }
  "channelName" : {
     ....
  }
  ...
}
    






Server design:
index.php: starting location
quickstart.php: a startup wizard
host.php: the page by which the server communicates with hosts

status.php: the page showing status of all of the stuff
configure.php: the page to set up all of the stuff once it's connected/accepted
setup.php: the page to add hosts to the system and configure their basic properties
help.php: a page to help people get oriented

model/ : functions to handle the DB interactions
    model.php: basic db stuff: connect, reset, disconect, etc.
    hostFn.php: functions in support of host.php
    statusFn.php: functions in support of status.php
    ...Fn.php: functions in support of ....php
    setupFn.php: functions in support of setup.php
    
template/ : header, footer, etc. to include as part of paiting the pages in a uniform style

test/ : test functions to support development

../static/ : jss/css/pictures/etc.


